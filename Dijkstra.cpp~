#include "Dijkstra.h"

void Dijkstra::dijkstra(AdjacencyMatrix graph, int source) {
  AdjacencyGraph ng = getNegativeGraph(graph);
  int vertices = ng.getVertices();
  for (int i = 0; i < vertices; i++) {
    distance_[i] = inf;
    parent_[i] = null;
  }
  distance_[source] = 0;
  std::priority_queue<int, std::vector<int>, std::greater<int> >
    Q (distance_, distance_ + vertices);
  
  while(Q.empty()) {
    int u = Q.pop();
    for (int v = 0; v < vertices; v++) {
      int alt = distance_[u] + ng.cost(u, v);
      if (alt < distance_[v]) {
	distance_[v] = alt;
	parent_[v] = u;
      }
    }
  }
}

std::vector<int> Dijkstra::getDistance() const {
  return distance_;
}

std::vector<int> Dijkstra::getParent() const {
  return parent_;
}

AdjacencyMatrix& Dijkstra::getNegativeGraph(AdjacencyMatrix graph) {
  AdjacencyGraph copygraph (graph.getVertices(), false);
  copygraph.add_edges (graph.getNegativeEdgeList());
  return copygraph;
}
